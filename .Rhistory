x = 2 + 2
print(x)
source("C:\E-OBS-SWB2\R\drafts\sum.R")
source("C:/E-OBS-SWB2/R/drafts/sum.R")
length(seq(0.2, 7, 0.2))
r2 <- read.csv('‪C:\Users\paolo\Downloads\Ricariche2.xls'x)
r2 <- read.csv('‪C:\Users\paolo\Downloads\Ricariche2.xlsx)
#Copia foglio "Lam" di Ricarica_TesiPiccioli
lam <- read.table('clipboard', sep = '\t', header = TRUE)
library(rgee)
ee_Initialize()
library(tidyverse)
library(sf)
library(mapview)
# create a bounding box over Venice
geometry <- ee$Geometry$Polygon(coords = list(c(12.29, 45.45), c(12.29, 45.41), c(12.37, 45.41), c(12.37, 45.45)))
# import CMIP5 bias-corrected daily data from NASA (CMIP6 will soon be made available)
cmip5_downscaled = ee$ImageCollection("NASA/NEX-GDDP")
# View some info on the dataset
ee_print(cmip5_downscaled)
startDate = ee$Date('2030-01-01');
endDate = ee$Date('2031-01-01');
n = endDate$difference(startDate,'day')$subtract(1);
# Choose a variable (max temperature), a climate model, and a forcing scenario
cmip5_downscaled_tasmax = cmip5_downscaled$select("tasmax") $
filterDate(startDate, endDate) $
filter(ee$Filter$eq("model", "MIROC-ESM"))$ # filter the model
filter(ee$Filter$eq("scenario", "rcp45")) # filter the scenario
# extract the mean value of max temperature from the pixels falling in the Venice bounding box for each day in the period defined
ee_nc_tasmax_2030 <- ee_extract(x = cmip5_downscaled_tasmax, y = geometry, fun=ee$Reducer$mean(), sf = FALSE, scale=1000)
# reshape long
ee_nc_tasmax_2030 <- pivot_longer(ee_nc_tasmax_2030, 1:ncol(ee_nc_tasmax_2030))
ee_nc_tasmax_2030 <- ee_nc_tasmax_2030 %>%
separate(col=name,
into=c("scenario", "model", "date", "variable"), sep="_")
ee_nc_tasmax_2030$date <- as.Date(ee_nc_tasmax_2030$date, format = "%Y%m%d")
install.packages("trend")
library(trend)
head = read.csv('./data/head_IT03GWBISSAPTA.csv')
setwd('C:/SFS')
head = read.csv('./data/head_IT03GWBISSAPTA.csv')
View(head)
library(zoo)
install.packages("zoo")
library(zoo)
head_fill = zoo:na.approx(head)
head_fill = zoo:na.approx(head, maxgap = 12)
View(head)
head_fill = zoo:na.approx(head$PO012002NU0008, maxgap = 12)
which(!is.na(head))
min(which(!is.na(head$PO012002NU0008)))
for(col in names(head)){
print(min(which(!is.na(head[col]))))
}
names(head)[-1]
head$PO012002NU0008[141:]
head_fill = zoo:na.approx(head$PO012002NU0008[141:nrow(head)], maxgap = 12)
nrow(head)
head$PO012002NU0008[141:nrow(head)]
zoo:na.approx(head$PO012002NU0008[141:nrow(head)], maxgap = 12)
na.approx(head$PO012002NU0008[141:nrow(head)], maxgap = 12)
na.approx(head$PO012002NU0008[141:nrow(head)], maxgap = 12)
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[idx, col] = na.approx(head[col][idx:nrow(head)], maxgap = 12)
}
head_fill = head
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[idx, col] = na.approx(head[col][idx:nrow(head)], maxgap = 12)
}
head[col]
head[col][idx:nrow(head)]
head[col][idx:nrow(head), 2]
head[col]
head[, col]
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[idx, col] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
}
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[idx:nrow(head), col] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
}
head_fill[idx:nrow(head), col]
na.approx(head[, col][idx:nrow(head)], maxgap = 12)
head_fill[idx:nrow(head), col] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
length(head_fill[idx:nrow(head), col])
length(na.approx(head[, col][idx:nrow(head)], maxgap = 12))
idx:nrow(head)
idx:nrow(head)
idx = min(which(!is.na(head[col])))
head[, col][idx:nrow(head)]
head_fill[idx:nrow(head), col]
na.approx(head[, col][idx:nrow(head)], maxgap = 12)
head_fill[idx:nrow(head), col] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
setwd('C:/SFS')
head = read.csv('./data/head_IT03GWBISSAPTA.csv')
head_fill = head
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[idx:nrow(head), col] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
}
View(head_fill)
head_fill[idx:nrow(head), col]
head_fill[, col][idx:nrow(head)] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
head_fill[, col][idx:nrow(head)]
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[, col][idx:nrow(head)] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
}
warnings()
head_fill = head
for(col in names(head)[-1]){
idx = min(which(!is.na(head[col])))
head_fill[, col][idx:nrow(head)] = na.approx(head[, col][idx:nrow(head)], maxgap = 12)
}
View(head_fill)
na.approx(head[, col][idx:nrow(head)], maxgap = 12)
head_fill = head
head_fill[, col][idx:nrow(head)]
mk.test(head_fill)
mk.test(head_fill[col])
head_fill[col]
mk.test(head_fill[, col])
mk.test(head_fill[!is.na(head_fill[, col]), col])
View(head)
mk.test(head_fill[!is.na(head_fill[, col]), col])
for(col in names(head_fill)[-1]){
print(col)
mk.test(head_fill[!is.na(head_fill[, col]), col])
}
mk.test(head_fill[!is.na(head_fill[, col]), col])[0]
mk.test(head_fill[!is.na(head_fill[, col]), col])[]
mk.test(head_fill[!is.na(head_fill[, col]), col])$p-value
mk.test(head_fill[!is.na(head_fill[, col]), col])[]$p-value
mk.test(head_fill[!is.na(head_fill[, col]), col])[]$p.value
mk.test(head_fill[!is.na(head_fill[, col]), col])$p.value
mk_db <- as.data.frame(array(dim = c(length(names(head_fill)[-1]), 2)))
names(mk_db) <- c("p_value", "stat")
mk_db <- as.data.frame(array(dim = c(length(names(head_fill)[-1]), 3)))
names(mk_db) <- c("code", "p_value", "stat")
mk_db$code <- names(head_fill)[-1]
mk_db[col, 2]
mk_db[col, 2] <-  3
View(mk_db)
rownames(mk_db) <- mk_db$code
mk_db <- as.data.frame(array(dim = c(length(names(head_fill)[-1]), 3)))
names(mk_db) <- c("code", "p_value", "stat")
mk_db$code <- names(head_fill)[-1]
rownames(mk_db) <- mk_db$code
View(mk_db)
mk_db[col, 2] <-  3
View(mk_db)
for(col in names(head_fill)[-1]){
mk_db[col, 1] <- mk.test(head_fill[!is.na(head_fill[, col]), col])$p.value
mk_db[col, 2] <- mk.test(head_fill[!is.na(head_fill[, col]), col])$statistic
}
View(mk_db)
mk_db <- as.data.frame(array(dim = c(length(names(head_fill)[-1]), 2)))
names(mk_db) <- c("p_value", "stat")
rownames(mk_db) <- names(head_fill)[-1]
for(col in names(head_fill)[-1]){
mk_db[col, 1] <- mk.test(head_fill[!is.na(head_fill[, col]), col])$p.value
mk_db[col, 2] <- mk.test(head_fill[!is.na(head_fill[, col]), col])$statistic
}
sens.slope(head_fill[!is.na(head_fill[, col]), col])
sens.slope(head_fill[!is.na(head_fill[, col]), col])[]
sen_db <- as.data.frame(array(dim = c(length(names(head_fill)[-1]), 2)))
names(sen_db) <- c("slope", "stat")
rownames(sen_db) <- names(head_fill)[-1]
for(col in names(head_fill)[-1]){
sen_db[col, 1] <- sens.slope(head_fill[!is.na(head_fill[, col]), col])$estimates
sen_db[col, 2] <- sens.slope(head_fill[!is.na(head_fill[, col]), col])$statistic
}
View(sen_db)
View(sen_db)
View(mk_db)
View(mk_db)
mk.test(head_fill[!is.na(head_fill[, col]), col])[]
mk.test(head_fill[!is.na(head_fill[, col]), col])$estimates[1]
